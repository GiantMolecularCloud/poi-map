[tool.poetry]
name = "poi-map"
version = "1.1.0"
description = ""
authors = ["giantmolecularcloud"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pandas = "^2.2.2"
pydantic = "^2.9.1"
dash = "^2.18.0"
plotly = "^5.24.0"
dash-leaflet = "^1.0.15"
dash-bootstrap-components = "^1.6.0"
pyarrow = "^17.0.0"
pandera = "^0.22.1"

[tool.poetry.group.dev.dependencies]
pydantic-settings = "2.2.1"
autodoc_pydantic = ">=1.8,<3"
black = "^23"
coverage = {extras = ["toml"], version = "^7"}
darglint = "^1.5.8"
flake8 = "^6"
flake8-annotations = "^3"
flake8-black = "^0.3.2"
flake8-bugbear = "^23"
flake8-cognitive-complexity = "^0.1.0"
flake8-comprehensions = "^3.3.1"
flake8-debugger = "^4.0.0"
flake8-docstrings = "^1.5.0"
flake8-formatter-junit-xml = "^0.0.6"
flake8-isort = "^6"
flake8-mutable = "^1.2.0"
flake8-simplify = "^0.19.1"
flake8-super = "^0.1.3"
isort = "^5.7.0"
mypy = "^1"
pep8-naming = "^0.13.2"
pip-licenses = "^4"
poethepoet = "^0.18"
pre-commit = "^3"
pytest = {version = "^7.1.1"}
pytest-cov = "^4.0.0"
pytest-mock = "^3.5.0"
pytest-rerunfailures = "^11"
pytest-sugar = "^0.9.4"
pytest-timeout = "^2.1.0"
sphinx = "^6"
sphinx-argparse = "^0.4"
sphinx-autoapi = "^3.0.0"
sphinx-autodoc-typehints = "^1.17.0"
sphinx-rtd-theme = "^1.0.0"
twine = "^4.0.1"
wcwidth = "^0.2.13"
python-dotenv = "^1.0.1"
ipython = "^8.27.0"

[tool.poetry.scripts]
poi-map = "poi_map.entrypoints.poi_map:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.paths]
source = ["poi_map", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["poi_map"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    'pragma: no cover',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
]

[tool.pytest.ini_options]
timeout = 300
testpaths = ["tests"]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.mypy]
files = "poi_map"
allow_redefinition = false
plugins = ["numpy.typing.mypy_plugin", "pydantic.mypy"]

[[tool.mypy.overrides]]
module = "pandas.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dash.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dash_leaflet.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dash_bootstrap_components.*"
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
warn_untyped_fields = true
init_typed = true

[tool.poe.tasks]
isort = {cmd = "isort poi_map", help = "Sort imports"}
black = {cmd = "black -l 120 poi_map tests", help = "Format source code"}
format = {sequence = ["isort", "black"], help = "Format source code & sort imports"}
lint = {cmd = "flake8 --max-cognitive-complexity=15 poi_map", help = "Lint and complexity score for source code"}
mypy = {cmd = "mypy poi_map", help = "Type check code"}
test = {cmd = "pytest --cov=poi_map --cov-config=pyproject.toml", help = "Run test suite"}
docs = {sequence = [
    { cmd = "pip-licenses --summary --from=classifier --with-system --format=rst --output-file docs/sources/_generated/licenses_summary.rst" },
    { cmd = "pip-licenses --format=rst --output-file docs/sources/_generated/licenses.rst" },
    { cmd = "sphinx-build docs docs/_build" },
], help = "Build documentation"}
precommit = {sequence = ["format", "lint", "mypy", "test", "docs"], help = "Prepare for commit"}
make-tag = { shell = "git tag -a `poetry version -s` -m v`poetry version -s`", help = "Create git tag for current version" }
